@page "/WriteAsArchivePageGeneratorResults"
@inject NavigationManager navManager2
@inject HttpClient httpClient
@using System.Text.Json
@using apps.dinobansigan.com.Models

@if (archivePageItems == null)
{
    <SpinKitChasingDots />
}
else
{
    if (archivePageItems.Count == 0)
    {
        <div class="alert alert-warning" role="alert">
            Could not generate Archive page contents for https://write.as/<span class="font-weight-bold">@writeAsAlias</span>
        </div>
    }
    else
    {
        <h2 class="mb-4 text-primary text-center text-dark">Archive Page Contents for<br /><em>https://write.as/@writeAsAlias</em></h2>
        string domainName = "https://write.as/" + writeAsAlias;
        if (!domainName.EndsWith('/'))
        {
            domainName += "/";
        }
        System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
        string currentYear = string.Empty;
        stringBuilder.AppendLine("<div class=\"archivePage\">");
        @foreach (var post in archivePageItems)
        {
            DateTime localPublishDate = post.PublishDate.ToLocalTime();
            if (string.IsNullOrEmpty(currentYear) || localPublishDate.Year.ToString() != currentYear)
            {
                currentYear = localPublishDate.Year.ToString();
                stringBuilder.AppendLine("<h1>" + currentYear + "</h1>");
                stringBuilder.AppendLine("<hr class=\"archivePageHr\"/>");
            }

            string createDate = localPublishDate.ToString("yyyy-MM-dd");
            string postTitle = post.Title;
            string postUrl = post.Url;
            stringBuilder.AppendLine(string.Format("<div><a href=\"{0}\" target=\"_blank\"><span class=\"archivePageDateSpan\">{1}:</span> {2}</a></div>", postUrl, createDate, postTitle));
        }
        stringBuilder.AppendLine("</div>");
        <textarea class="form-control mb-4" style="font-family: monospace;" rows="20">@stringBuilder.ToString()</textarea>

        <div class="alert alert-success" role="alert">
            <p>Copy the contents of the textbox above and paste it into a Write.as page and hit Publish.</p>
            <p><em>If you wanted to customize the look of the contents, you can create custom CSS for the following classes:</em></p>
            <ul>
                <li><em>archivePage</em></li>
                <li><em>archivePageHr</em></li>
                <li><em>archivePageDateSpan</em></li>
            </ul>
        </div>
    }

    <div class="mt-4 mb-4 text-center">
        <button class="btn btn-primary btn-lg" @onclick="NavigateBackToArchivePageGenerator">Back to Archive Page Generator</button>
    </div>
}

@code {
    string writeAsAlias { get; set; }
    List<ArchivePageItem> archivePageItems = null;

    protected override async Task OnInitializedAsync()
    {
        var uri = navManager2.ToAbsoluteUri(navManager2.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("alias", out var param))
        {
            writeAsAlias = param.First();
        }

        if (!string.IsNullOrEmpty(writeAsAlias))
        {
            try
            {
                string url = $"api/WriteAs/ArchivePageItems?alias={writeAsAlias}";
                using HttpResponseMessage response = await httpClient.GetAsync(url);
                response.EnsureSuccessStatusCode();
                string responseBody = await response.Content.ReadAsStringAsync();
                var options = new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                };
                var items = JsonSerializer.Deserialize<ArchivePageItem[]>(responseBody, options);
                archivePageItems = items.ToList();
            }
            catch (Exception)
            {
                archivePageItems = new List<ArchivePageItem>();
            }
        }
    }

    private void NavigateBackToArchivePageGenerator()
    {
        archivePageItems = null;
        navManager2.NavigateTo("/WriteAsArchivePageGenerator");
    }
}